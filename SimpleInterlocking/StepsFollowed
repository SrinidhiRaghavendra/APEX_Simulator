Steps followed:

1. Parse all types of instructions and udpdate the code memory with the decoded instructions. Done in create_APEX_instruction(APEX_Instruction* ins, char* buffer).
2. Added the 3rd source register for STR instructions.
2. Print the code memory once all types of instructions are updated.


TBD:
1. Initialize is already done for PART1.
2. Stop the execution flow after n cycles. - done
3. Display the contents of each stage of the pipeline, all registers, flag reigister and the contents of the firt 100 memory locations containing data, starting with address 0.

Without forwarding:
1. Handle BZ, BNZ, JUMP instructions in DRF,EX1,EX2,MEM1(no need here),MEM2(no need here, but still needs to be pushed across all stages) and WB stages(no need here, but still needs to be pushed across all stages). - Test JUMP and BNZ - done.
2. HALT instructions has to be pushed till the WB stage without doing anything, and execution needs to be stopped from that cycle for all stages.  - Stop all instruction fetch after decoding the HALT instruction - done.
3. State of architectural register file.
4. State of data memory. 

Forwarding: 
1. Do forwarding from EX2 or MEM2 stages only

PL:
Assignment questions.


Apply for internships.

Development.

Novemeber 10:
Sleep till 10:30AM - done, got up at 11:10
Get ready by 11:00AM
11:00AM - 1:00PM - CAO - done, almost finished first part by 1:20
2:00PM - 4:00PM - PL
4:30PM - 6:30PM - CAO
7:00PM - 9:00PM - prepare for interview
9:30 - 11:30 - CAO
12:00 - 1:00 PL/Apply for internships